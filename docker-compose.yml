version: '3.4'

secrets:
  env:
    file: .env
  cert:
    file: secret/cert.pem
  key:
    file: secret/key.pem
  pccx:
    file: secret/pccx.env
  ssh-id:
    file: secret/id_rsa
  ssh-id-pub:
    file: secret/id_rsa.pub

x-custom:
- &lib ./lib:/usr/lib/pccx:ro
- &libexec ./libexec:/usr/libexec/pccx:ro
- &public-ssh-id
  source: ssh-id-pub
  target: /root/.ssh/id_rsa_ansible.pub
- &secret-ssh-id
  source: ssh-id
  target: /root/.ssh/id_rsa_ansible
- &gateway-uid ${GATEWAY_UID:-0}
- &gateway-gid ${GATEWAY_GID:-0}
- &key-manager-uid ${KEYMANAGER_UID:-0}
- &key-manager-gid ${KEYMANAGER_GID:-0}
- &minio-uid ${MINIO_UID:-0}
- &minio-gid ${MINIO_GID:-0}
- &pcc-ui-uid ${PCCUI_UID:-0}
- &pcc-ui-gid ${PCCUI_GID:-0}
- &restart ${RESTART:-unless-stopped}
- &tlsx-verbose -verbose=${TLSX_VERBOSE:-false}
- &tlsx-tap-addr ${TLSX_TAP_ADDR:-10.100.0.254}
- &tlsx-vpn ${TLSX_VPN:-10.100.0.0/24}

services:
  tlsx:
    container_name: tlsx
    image: ${TLSX_IMAGE}
    restart: *restart
    ports:
    - ${TLSX_PORT:-8003}:8003
    environment:
      TLSX_CERT_FILE: /run/secrets/cert
      TLSX_KEY_FILE: /run/secrets/key
      TLSX_SUBSCRIBERS_FILE: /var/run/ko/subscribers
    secrets: [ cert, key ]
    volumes:
    - ./data/tlsx:/var/run/ko
    command:
    - *tlsx-verbose
    - start
    - exchange
    - *tlsx-vpn

  tap:
    container_name: tap
    depends_on: [ tlsx ]
    image: ${TLSX_IMAGE}
    restart: *restart
    networks:
      default:
      backend:
        aliases:
        - kafka
        - pccserver
    expose:
    - 3030
    - ${PCCSERVER_PORT:-8989}
    ports:
    - 8081:8081
    - 9092:9092
    cap_add: [ ALL ]
    devices: [ /dev/net/tun ]
    privileged: true
    user: "0:0"
    environment:
      TLSX_CERT_FILE: /run/secrets/cert
      TLSX_KEY_FILE: /run/secrets/key
    secrets: [ cert, key ]
    command:
    - *tlsx-verbose
    - start
    - tap
    - -a
    - *tlsx-tap-addr
    - "@tlsx"

  kafka:
    container_name: kafka
    platform: linux/amd64
    image: ${KAFKA_IMAGE}
    restart: *restart
    network_mode: "service:tap"
    privileged: true
    user: "0:0"
    command: /usr/libexec/pccx/kafka
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/kafka:/var/lib/kafka
    - ./log/kafka:/var/log
    - ./lib/kafka/patch/zookeeper-3.5.9-patch.jar:/opt/landoop/kafka/share/java/kafka/zookeeper-3.5.9.jar
    - ./lib/kafka/patch/zookeeper-3.5.9-patch.jar:/opt/landoop/kafka/share/java/schema-registry/zookeeper-3.5.8.jar
    - ./lib/kafka/patch/zookeeper-3.5.9-patch.jar:/opt/landoop/kafka/share/java/landoop-common/zookeeper-3.5.7.jar
    - ./lib/kafka/patch/zookeeper-3.5.9-patch.jar:/opt/landoop/connectors/third-party/kafka-connect-s3/zookeeper-3.5.8.jar
    - ./lib/kafka/patch/zookeeper-jute-3.5.9.jar:/opt/landoop/kafka/share/java/kafka/zookeeper-jute-3.5.9.jar
    - ./lib/kafka/patch/zookeeper-jute-3.5.9.jar:/opt/landoop/kafka/share/java/schema-registry/zookeeper-jute-3.5.8.jar
    - ./lib/kafka/patch/zookeeper-jute-3.5.9.jar:/opt/landoop/kafka/share/java/landoop-common/zookeeper-jute-3.5.7.jar
    - ./lib/kafka/patch/zookeeper-jute-3.5.9.jar:/opt/landoop/connectors/third-party/kafka-connect-s3/zookeeper-jute-3.5.8.jar

  pccserver:
    container_name: pccserver
    depends_on: [ postgres, api-registry, kafka, platina-executor, maas ]
    platform: linux/amd64
    image: ${PCC_IMAGE}
    restart: *restart
    network_mode: "service:tap"
    privileged: true
    cap_add:
    - SYS_PTRACE
    - NET_ADMIN
    - SYS_ADMIN
    devices: [ /dev/net/tun ]
    entrypoint: /usr/libexec/pccx/pccserver
    secrets:
    - env
    - pccx
    - *public-ssh-id
    - *secret-ssh-id
    volumes:
    - *lib
    - *libexec
    - ./data/pccserver:/var/lib/pccx
    - ./log/pccserver:/home/logs
    - ops-playbooks:/home/ops
    - orchestration-playbooks:/home/orchestration
    - kubespray2-playbooks:/home/kubespray
    - kubespray-playbooks:/home/turnkey-kubespray
    - pccserver-playbooks:/home/ansible

  redis:
    container_name: redis
    image: ${REDIS_IMAGE}
    networks:
      backend:
        aliases:
        - monitor_redis
    expose:
    - ${REDIS_PORT:-6379}
    volumes:
    - ./data/redis:/data

  postgres:
    container_name: postgres
    platform: linux/amd64
    image: ${POSTGRES_IMAGE}
    restart: *restart
    networks:
      backend:
        aliases:
        - postgres-db
    expose:
    - ${POSTGRES_PORT:-5432}
    entrypoint: /usr/libexec/pccx/postgres
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/postgres:/var/lib/postgresql
    - ./log/postgres:/home/logs
    command: postgres -c config_file=/usr/lib/pccx/postgresql.conf

  prometheus:
    container_name: prometheus
    image: ${PROMETHEUS_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${PROMETHEUS_PORT:-9090}
    privileged: true
    user: "0:0"
    volumes:
    - *lib
    - ./data/prometheus:/prometheus
    - &prometheus-rules ./data/prometheus-rules:/home/prometheus/rules/
    command: >-
      --config.file=/usr/lib/pccx/prometheus.yml
      --web.enable-lifecycle
      --storage.tsdb.retention.time=15d

  adminer:
    container_name: adminer
    depends_on: [ postgres ]
    image: ${ADMINER_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${ADMINER_PORT:-8080}
    command: php -S "[::]:8080" -t /var/www/html

  minio:
    container_name: minio
    image: ${MINIO_IMAGE}
    restart: *restart
    networks:
      backend:
        aliases:
        - storage
    expose:
    - ${MINIO_PORT:-9000}
    - ${MINIO_CONSOLE_PORT:-9001}
    entrypoint: /usr/libexec/pccx/minio
    secrets:
    - env
    - pccx
#   - source: cert
#     target: /mnt/certs/public.crt
#     uid: *minio-uid
#     gid: *minio-gid
#     mode: 0400
#   - source: key
#     target: /mnt/certs/private.key
#     uid: *minio-uid
#     gid: *minio-gid
#     mode: 0400
    volumes:
    - *lib
    - *libexec
    - ./data/minio:${MINIO_VOLUMES:-/var/lib/minio}
    - ./log/minio:/var/log
    healthcheck:
      interval: 30s
      timeout: 2s
      test:
      - "CMD"
      - "curl"
      - "-f"
      - "-k"
#     - "--cacert"
#     - "/mnt/certs/public.crt"
      - "http://${MINIO_HOST:-minio}:${MINIO_PORT:-9000}/minio/health/live"
    command: server
      --certs-dir=/mnt/certs
      --console-address=:${MINIO_CONSOLE_PORT}
      ${MINIO_VOLUMES:-/var/lib/minio}

  cadvisor:
    container_name: cadvisor
    image: ${CADVISOR_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${CADVISOR_PORT:-8080}
    labels:
      org.label-schema.group: "monitoring"
    privileged: true
    devices: [ "/dev/kmsg:/dev/kmsg" ]
    volumes:
    - /:/rootfs:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /etc/machine-id:/etc/machine-id:ro
    - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    command:
    - '--docker_only=true'
    - '--housekeeping_interval=15s'
    - '--port=8080'

  node-exporter:
    container_name: node-exporter
    image: ${NODE_EXPORTER_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${NODE_EXPORTER_PORT:-9100}
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
    - '--path.procfs=/host/proc'
    - '--path.rootfs=/rootfs'
    - '--path.sysfs=/host/sys'
    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  alertmanager:
    container_name: alertmanager
    image: ${ALERTMANAGER_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${ALERTMANAGER_PORT:-9093}
    labels:
      org.label-schema.group: "monitoring"
    volumes:
    - *lib
    - ./data/alertmanager:/var/lib/alertmanager
    command: >-
      --config.file=/usr/lib/pccx/alertmanager.yml
      --storage.path=/var/lib/alertmanager

  pushgateway:
    container_name: pushgateway
    image: ${PUSHGATEWAY_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${PUSHGATEWAY_PORT:-9091}
    labels:
      org.label-schema.group: "monitoring"
    command: [ '--web.enable-admin-api' ]

  api-registry:
    container_name: api-registry
    depends_on: [ postgres ]
    platform: linux/amd64
    image: ${APIREGISTRY_IMAGE}
    restart: *restart
    networks:
      backend:
        aliases:
        - registry
    expose:
    - ${APIREGISTRY_PORT:-8761}
    entrypoint: /usr/libexec/pccx/api-registry
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/api-registry:/var/lib/pccx
    - ./log/api-registry:/home/logs

  gateway:
    container_name: gateway
    depends_on:
    - postgres
    - pccserver
    - security
    - user-management
    - key-manager
    - platina-monitor
    - maas
    platform: linux/amd64
    image: ${GATEWAY_IMAGE}
    restart: *restart
    networks: [ backend ]
    ports: [ "443:9999" ]
    expose:
    - ${GATEWAY_PORT:-9999}
    entrypoint: /usr/libexec/pccx/gateway
    secrets:
    - env
    - pccx
    - source: cert
      target: /home/certs/server.crt
      uid: *gateway-uid
      gid: *gateway-gid
      mode: 0400
    - source: key
      target: /home/certs/server.key
      uid: *gateway-uid
      gid: *gateway-gid
      mode: 0400
    volumes:
    - *lib
    - *libexec
    - ./data/gateway:/var/lib/pccx
    - ./log/gateway:/home/logs

  mailer:
    container_name: mailer
    depends_on: [ postgres, api-registry ]
    platform: linux/amd64
    image: ${MAILER_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${MAILER_PORT:-8787}
    cap_add: [ SYS_PTRACE ]
    entrypoint: /usr/libexec/pccx/mailer
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/mailer:/var/lib/pccx
    - ./log/mailer:/home/logs

  user-management:
    container_name: user-management
    depends_on: [ api-registry, security, minio, mailer ]
    platform: linux/amd64
    image: ${USERMANAGEMENT_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${USERMANAGEMENT_PORT:-8083}
    entrypoint: /usr/libexec/pccx/user-management
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/user-management:/var/lib/pccx
    - ./log/user-management:/home/logs

  security:
    container_name: security
    depends_on: [ postgres, api-registry, pccserver ]
    platform: linux/amd64
    image: ${SECURITY_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${SECURITY_PORT:-8082}
    entrypoint: /usr/libexec/pccx/security
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/security:/var/lib/pccx
    - ./log/security:/home/logs

  key-manager:
    container_name: key-manager
    depends_on: [ postgres, api-registry ]
    platform: linux/amd64
    image: ${KEYMANAGER_IMAGE}
    restart: *restart
    cap_add: [ ALL ]
    privileged: true
    user: "0:0"
    networks: [ backend ]
    expose: 
    - ${KEYMANAGER_PORT:-8084}
    entrypoint: /usr/libexec/pccx/key-manager
    secrets:
    - env
    - pccx
    - source: ssh-id-pub
      target: /home/keys/system.pub
    - source: ssh-id
      target: /home/keys/system.pem
      uid: *key-manager-uid
      gid: *key-manager-gid
      mode: 0400
    volumes:
    - *lib
    - *libexec
    - ./data/key-manager:/var/lib/pccx
    - ./log/key-manager:/home/logs

  monitor:
    container_name: monitor
    depends_on: [ api-registry, redis, kafka ]
    platform: linux/amd64
    image: ${MONITOR_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${MONITOR_PORT:-9191}
    entrypoint: /usr/libexec/pccx/monitor
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/monitor:/var/lib/pccx
    - ./log/monitor:/home/logs

  platina-executor:
    container_name: platina-executor
    depends_on: [ kafka ]
    platform: linux/amd64
    image: ${PLATINAEXECUTOR_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${PLATINAEXECUTOR_PORT:-8998}
    privileged: true
    entrypoint: /usr/libexec/pccx/platina-executor
    secrets:
    - env
    - pccx
    - *public-ssh-id
    - *secret-ssh-id
    volumes:
    - *lib
    - *libexec
    - ./data/platina-executor:/var/lib/pccx
    - ./log/platina-executor:/home/logs
    - /usr/bin/docker:/usr/bin/docker
    - /var/run/docker.sock:/var/run/docker.sock
    - pccserver-playbooks:/home/ansible:ro
    - kubespray2-playbooks:/home/kubespray:ro
    - kubespray-playbooks:/home/turnkey-kubespray:ro
    - ops-playbooks:/home/ops:ro
    - orchestration-playbooks:/home/orchestration

  platina-monitor:
    container_name: platina-monitor
    depends_on:
    - postgres
    - api-registry
    - kafka
    - prometheus
    - alertmanager
    - pushgateway
    - mailer
    platform: linux/amd64
    image: ${PLATINAMONITOR_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${PLATINAMONITOR_PORT:-8995}
    entrypoint: /usr/libexec/pccx/platina-monitor
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/platina-monitor:/var/lib/pccx
    - ./log/platina-monitor:/home/logs
    - *prometheus-rules

  maas:
    container_name: maas
    depends_on: [ postgres, api-registry ]
    platform: linux/amd64
    image: ${MAAS_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${MAAS_PORT:- 5980}
    privileged: true
    cap_add: [ SYS_PTRACE ]
    entrypoint: /usr/libexec/pccx/maas
    secrets:
    - env
    - pccx
    - *public-ssh-id
    - *secret-ssh-id
    volumes:
    - *lib
    - *libexec
    - ./data/maas:/var/lib/pccx
    - ./log/maas:/home/logs

  phone-home:
    container_name: phone-home
    depends_on: [ postgres, api-registry, minio ]
    platform: linux/amd64
    image: ${PHONEHOME_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose: [ 8383, 9000 ]
    cap_add: [ SYS_PTRACE ]
    entrypoint: /usr/libexec/pccx/phone-home
    secrets: [ env, pccx ]
    volumes:
    - *lib
    - *libexec
    - ./data/phone-home:/var/lib/pccx
    - ./log/phone-home:/home/logs
    - ${PHONEHOME_PUBKEY_FILE}:/root/.gnupg/pubkey.asc:ro

  pcc-ui:
    container_name: pcc-ui
    depends_on: [ gateway ]
    platform: linux/amd64
    image: ${PCCUI_IMAGE}
    restart: *restart
    networks: [ backend ]
    expose:
    - ${PCCUI_PORT:-443}
    entrypoint: /usr/libexec/pccx/pcc-ui
    secrets:
    - env
    - pccx
    - source: cert
      target: /usr/local/apache2/conf/server.crt
      uid: *pcc-ui-uid
      gid: *pcc-ui-gid
      mode: 0400
    - source: key
      target: /usr/local/apache2/conf/server.key
      uid: *pcc-ui-uid
      gid: *pcc-ui-gid
      mode: 0400
    volumes:
    - *lib
    - *libexec
    - ./data/pcc-ui:/var/lib/pccx
    - ./log/pcc-ui:/home/logs

networks:
  backend: {}

volumes:
  tlsx:
  kubespray2-playbooks:
  kubespray-playbooks:
  ops-playbooks:
  orchestration-playbooks:
  pccserver-playbooks:
