#!/bin/sh -e

create() {
	mode=$1; shift
	file=$1; shift
	touch ${file}
	chmod ${mode} ${file}
	if test $# -gt 0; then
		>>${file} eval $@
	fi
}

# Set variable named by first argument with remaining prompt.
# e.g. this sets ${user} with input up to newline
#
#	prompt user name '(default: FOO)'
#	> Enter user name (default: FOO): <input>
#
prompt() {
	eval var=$1
	shift
	printf 'Enter %s: ' "$*"
	eval read "${var}"
}

# Silently set variable named by first argument with remaining prompt.
# e.g. this sets ${password} with non-echo'd input up to newline
#
#	sprompt password '(default: FOO)'
#	> Enter password (default: FOO): <input>
#
sprompt() {
	eval var=$1
	printf 'Enter %s: ' "$*"
	restore=`stty -g`
	stty -echo
	trap "stty ${restore}" EXIT
	eval read -r "${var}"
	stty ${restore}
	trap - EXIT
	echo
}

tsort=tsort$$

test ! -r .env || . ./.env

: ${SERVICE_CONFIG_URI:=/home/conf/application.yml}

: ${UID:=$(id -u)}
: ${GID:=$(id -g)}
: ${MACHINE:=$(uname -m)}

case ${MACHINE} in
arm64 ) : ${JAVA_OPTS:=-Djdk.lang.Process.launchMechanism=vfork} ;
esac

: ${reg:=platinadownload.auctacognitio.com}
: ${rel:=release-branch.pcc2.1}

: ${ADMINER_IMAGE:=adminer}
: ${ALERTMANAGER_IMAGE:=prom/alertmanager}
: ${APIREGISTRY_IMAGE:=${reg}/registry:${rel}}
: ${CADVISOR_IMAGE:=zcube/cadvisor}
: ${GATEWAY_IMAGE:=${reg}/gateway:${rel}}
: ${KAFKA_IMAGE:=${reg}/fast-data-dev:2.6.2}
: ${KEYMANAGER_IMAGE:=${reg}/key-manager:${rel}}
: ${MAAS_IMAGE:=${reg}/maas:${rel}}
: ${MAILER_IMAGE:=${reg}/mailer:${rel}}
: ${MINIO_IMAGE:=minio/minio}
: ${MONITOR_IMAGE:=${reg}/monitor:${rel}}
: ${NODE_EXPORTER_IMAGE:=prom/node-exporter}
: ${PCCUI_IMAGE:=${reg}/pcc-ui:${rel}}
: ${PCC_IMAGE:=${reg}/pccserver:${rel}}
: ${PHONEHOME_IMAGE:=${reg}/phone-home:${rel}}
: ${PLATINAEXECUTOR_IMAGE:=${reg}/platina-executor:${rel}}
: ${PLATINAMONITOR_IMAGE:=${reg}/platina-monitor:${rel}}
: ${POSTGRES_IMAGE:=${reg}/postgres:10.6-alpine}
: ${PROMETHEUS_IMAGE:=prom/prometheus}
: ${PUSHGATEWAY_IMAGE:=prom/pushgateway}
: ${REDIS_IMAGE:=redis:5.0.3-alpine}
: ${SECURITY_IMAGE:=${reg}/security:${rel}}
: ${TLSX_IMAGE:=${reg}/tlsx}
: ${USERMANAGEMENT_IMAGE:=${reg}/user-management:${rel}}

test -f .env || create 0600 .env

for v in \
	SERVICE_CONFIG_URI \
	JAVA_OPTS \
	ADMINER_IMAGE \
	ALERTMANAGER_IMAGE \
	APIREGISTRY_IMAGE \
	CADVISOR_IMAGE \
	GATEWAY_IMAGE \
	KAFKA_IMAGE \
	KEYMANAGER_IMAGE \
	MAAS_IMAGE \
	MAILER_IMAGE \
	MINIO_IMAGE \
	MONITOR_IMAGE \
	PCCUI_IMAGE \
	PCC_IMAGE \
	PHONEHOME_IMAGE \
	PLATINAEXECUTOR_IMAGE \
	PLATINAMONITOR_IMAGE \
	POSTGRES_IMAGE \
	PROMETHEUS_IMAGE \
	PUSHGATEWAY_IMAGE \
	SECURITY_IMAGE \
	TLSX_IMAGE \
	USERMANAGEMENT_IMAGE \
;do
	grep -q "^${v}=" .env || eval echo $v=\$$v >>.env
done

create 0600 ${tsort} sort -u .env && mv ${tsort} .env

: ${PCCX_SECRET:=${PWD}/secret}

mkdir -p -m 0700 ${PCCX_SECRET}

passfn=${PCCX_SECRET}/pccx.env
test ! -r $passfn || . $passfn

if test ! -f ${PCCX_SECRET}/cert.pem; then
	prompt algorithm '{ed25519, ecdsa256, ecdsa384, ecdsa512, rsa256, rsa384, rsa512} (default ed25519)'
	: ${algorithm:=ed25519}
	prompt fullname
	: ${fullname:=anonymous}
	prompt email
	: ${email:=no.one@no.where}
	_fqdn=$(hostname -f)
	prompt fqdn '[host fully qualified domain name]' "(default ${_fqdn})"
	: ${fqdn:=${_fqdn}}
	prompt organization
	: ${organization:=unspecified}
	prompt city
	: ${city:=unspecified}
	prompt state province
	: ${state:=unspecified}
	prompt country
	: ${country:=unspecified}
	docker run --rm --user ${UID}:${GID} \
		--mount type=bind,source=${PCCX_SECRET},target=/var/run/ko \
		${TLSX_IMAGE} --state=/var/run/ko create-cert \
			-alg "${algorithm}" \
			-country "${country}" \
			-dns "${fqdn}" \
			-locality "${city}" \
			-name "${fullname}" \
			-organization "${organization}" \
			-province "${state}"
fi

test -f ${PCCX_SECRET}/id_rsa ||
	ssh-keygen -q -t rsa -b 2048 -N '' -f ${PCCX_SECRET}/id_rsa

test "${POSTGRES_PASSWORD}" != "" || sprompt POSTGRES_PASSWORD

for v in \
	GATEWAY_KEYSTORE_PASSWORD \
	KAFKA_PASSWORD \
	KEYMANAGER_DB_PASSWORD \
	MAAS_DB_PASSWORD \
	MAILER_PASSWORD \
	PCC_DB_PASSWORD \
	PHONEHOME_DB_PASSWORD \
	PHONEHOME_SECRET_KEY \
	PLATINAEXECUTOR_DB_PASSWORD \
	PLATINAMONITOR_DB_PASSWORD \
	POSTGRES_DB_PASSWORD \
	SECURITY_ADMIN_PASSWORD \
	SECURITY_DB_PASSWORD \
	USERMANAGEMENT_DB_PASSWORD
do
	eval val=\$v
	test "${val}" != "" || sprompt $v '(default POSTGRES_PASSWORD)'
	eval val=\$v
	test "${val}" != "" || eval $v=${POSTGRES_PASSWORD}
done

test "${MINIO_ROOT_PASSWORD}" != "" ||
	sprompt MINIO_ROOT_PASSWORD '(default miniominio)'
test "${MINIO_ROOT_PASSWORD}" != "" ||
	MINIO_ROOT_PASSWORD=miniominio

test -f $passfn || create 0600 $passfn

for v in \
	GATEWAY_KEYSTORE_PASSWORD \
	KAFKA_PASSWORD \
	KEYMANAGER_DB_PASSWORD \
	MAAS_DB_PASSWORD \
	MAILER_PASSWORD \
	MINIO_ROOT_PASSWORD \
	NODE_EXPORTER_IMAGE \
	PCC_DB_PASSWORD \
	PHONEHOME_DB_PASSWORD \
	PHONEHOME_SECRET_KEY \
	PLATINAEXECUTOR_DB_PASSWORD \
	PLATINAMONITOR_DB_PASSWORD \
	POSTGRES_DB_PASSWORD \
	POSTGRES_PASSWORD \
	POSTGRES_USER \
	REDIS_IMAGE \
	SECURITY_ADMIN_PASSWORD \
	SECURITY_DB_PASSWORD \
	USERMANAGEMENT_DB_PASSWORD \
;do
	grep -q "^${v}=" $passfn || eval echo : \\\${$v:=\$$v} >>$passfn
done

create 0600 ${tsort} sort -u $passfn && mv ${tsort} $passfn
