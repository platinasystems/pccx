#!/bin/sh -e

test ! -r /etc/pccx || . /etc/pccx
test ! -r .env || . ./.env

: ${PCCX_DATA:=${PWD}/data}
: ${PCCX_SECRET:=${PWD}/secret}
: ${TLSX_IMAGE:=platina.io/tlsx}
: ${UID:=$(id -u)}
: ${GID:=$(id -g)}

if test $# -gt 0 -a "$1" = "help"; then
	docker run --rm ${TLSX_IMAGE} help create-cert
	exit 0
fi

create() {
	mode=$1; shift
	file=$1; shift
	mkdir -p ${file%/*}
	touch ${file}
	chmod ${mode} ${file}
	if test $# -gt 0; then
		>>${file} eval $@
	fi
}

# Set variable named by first argument with remaining prompt.
# e.g. this sets ${user} with input up to newline
#
#	prompt user name
#	> Enter name: <input>
#
prompt() {
	eval var=$1
	shift
	printf 'Enter %s: ' "$*"
	eval read "${var}"
}

# Silently set variable named by first argument with remaining prompt.
# e.g. this sets ${password} with non-echo'd input up to newline
#
#	sprompt pw password
#	> Enter password: <input>
#
sprompt() {
	eval var=$1
	shift
	printf 'Enter %s: ' "$*"
	restore=`stty -g`
	stty -echo
	trap "stty ${restore}" EXIT
	eval read -r "${var}"
	stty ${restore}
	trap - EXIT
	echo
}
	
if test ! -f ${PCCX_SECRET}/cert.pem; then
	mkdir -p tlsx
	prompt alg alorithm '{ed25519, ecdsa256, ecdsa384, ecdsa512, rsa256, rsa384, rsa512 (default ed25519)'
	: ${alg:=ed25519}
	_fullname=$(id -F)
	prompt fullname full name "(default ${fullname})"
	: ${fullname:=${_fullname}}
	prompt email email
	: ${email:=unspecified}
	_dns=$(hostname -f)
	prompt dns host fully qualified domain name "${_dns}"
	: ${dns:=${_dns}}
	prompt city city
	: ${city:=unspecified}
	prompt state state or province
	: ${state:=unspecified}
	prompt country country
	: ${country:=unspecified}
	docker run --rm --user ${UID}:${GID} \
		--mount type=bind,source=${PCCX_SECRET},target=/var/run/ko \
		${TLSX_IMAGE} --state=/var/run/ko create-cert \
			-alg "${alg}" \
			-country "${country}" \
			-dns "${dns}" \
			-locality "${city}" \
			-name "${fullname}" \
			-organization "${organization}" \
			-province "${state}"
fi

mkdir -p -m 0700 ${PCCX_SECRET}
mkdir -p -m 0700 ${PCCX_SECRET}/fixme

test -f ${PCCX_SECRET}/id_rsa ||
	ssh-keygen -q -t rsa -N '' -f ${PCCX_SECRET}/id_rsa

if test ! -s ${PCCX_SECRET}/minio.env; then
	prompt username minio root user name
	sprompt password minio root password
	create 0600 ${PCCX_SECRET}/minio.env cat <<-EOF
		MINIO_ROOT_USER="$username"
		MINIO_ROOT_PASSWORD="${password}"
		MINIO_VOLUMES=/data
	EOF
	test -s ${PCCX_SECRET}/minio.env
fi

if test ! -f ${PCCX_SECRET}/postgres.txt; then
	sprompt password postgres password
	create 0600 ${PCCX_SECRET}/postgres.txt tr -d \\\\n <<-EOF
		${password}
	EOF
	test -s ${PCCX_SECRET}/postgres.txt
fi

for d in \
	gateway \
	kafka \
	key-manager \
	maas \
	mailer \
	pccserver \
	phone-home \
	platina-executor \
	platina-monitor \
	security \
	security-admin \
	user-management
do
	if test ! -f ${PCCX_SECRET}/${d}.txt; then
		sprompt password $d password '(default == postgres)'
		create 0600 ${PCCX_SECRET}/${d}.txt tr -d \\\\n <<-EOF
			${password}
		EOF
		test -s ${PCCX_SECRET}/${d}.txt ||
			cat ${PCCX_SECRET}/postgres/password.txt >> \
				${PCCX_SECRET}/${d}.txt
	fi
done

test -s ${PCCX_SECRET}/fixme/gateway.env ||
	create 0600 ${PCCX_SECRET}/fixme/gateway.env cat <<-EOF
	KEYSTORE_PASSWORD="$(cat ${PCCX_SECRET}/gateway.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/kafka.env ||
	create 0600 ${PCCX_SECRET}/fixme/kafka.env cat <<-EOF
	PASSWORD="$(cat ${PCCX_SECRET}/kafka.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/key-manager.env ||
	create 0600 ${PCCX_SECRET}/fixme/key-manager.env cat <<-EOF
	PCC_DB_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/key-manager.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/maas.env ||
	create 0600 ${PCCX_SECRET}/fixme/maas.env cat <<-EOF
	POSTGRES_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/maas.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/mailer.env ||
	create 0600 ${PCCX_SECRET}/fixme/mailer.env cat <<-EOF
	SERVICE_PASSWORD="$(cat ${PCCX_SECRET}/mailer.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/pccserver.env ||
	create 0600 ${PCCX_SECRET}/fixme/pccserver.env cat <<-EOF
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	POSTGRES_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/phone-home.env ||
	create 0600 ${PCCX_SECRET}/fixme/phone-home.env cat <<-EOF
	PHONEHOME_DB_PASSWORD="$(cat ${PCCX_SECRET}/phone-home.txt)"
	PHONEHOME_SECRET_KEY="$(cat ${PCCX_SECRET}/phone-home.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/phone-home.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/platina-executor.env ||
	create 0600 ${PCCX_SECRET}/fixme/platina-executor.env cat <<-EOF
	PHONEHOME_SECRET_KEY="$(cat ${PCCX_SECRET}/phone-home.txt)"
	POSTGRES_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/platina-executor.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/platina-monitor.env ||
	create 0600 ${PCCX_SECRET}/fixme/platina-monitor/fixme.env cat <<-EOF
	PHONEHOME_SECRET_KEY="$(cat ${PCCX_SECRET}/phone-home.txt)"
	PLATINAMONITOR_DB_PASSWORD="$(cat ${PCCX_SECRET}/platina-monitor.txt)"
	POSTGRES_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/platina-monitor.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/security.env ||
	create 0600 ${PCCX_SECRET}/fixme/security.env cat <<-EOF
	ADMIN_PASSWD="$(cat ${PCCX_SECRET}/security-admin.txt)"
	PCC_DB_PASSWORD="$(cat ${PCCX_SECRET}/pccserver.txt)"
	PLATINAMONITOR_DB_PASSWORD="$(cat ${PCCX_SECRET}/platina-monitor.txt)"
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/security.txt)"
EOF

test -s ${PCCX_SECRET}/fixme/user-management.env ||
	create 0600 ${PCCX_SECRET}/fixme/user-management.env cat <<-EOF
	SERVICE_DB_PASSWORD="$(cat ${PCCX_SECRET}/user-management.txt)"
EOF
